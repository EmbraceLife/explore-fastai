# `Optimizer.__init__`

## What does `Optimizer.__init__` do overall?
To do the chores before optimizing the model

## What does `Optimizer.__init__` take in? 
- `params`: weights of layers in the form of tensors
- `cbs`: a list of callbacks/actions to be applied to weights
- `train_bn`: apply batch normalization or not, True or False
- `**defaults`: hyper parameters with their values in a dictionary 

## What comes out of `Optimizer.__init__` ?
- `self.cbs,self.state,self.train_bn`: create a better list or dict for `cbs, state, train_bn`.
- `self.param_lists`: modify weights or `params` into a list of list.
- `self.hypers`: a list of dictionaries (the number matches the number of weights items in `self.param_lists`) of hyper parameters with values.  The hyper params and their values are merged from both `**defaults` and `defaults` of `cbs`.
- `self.param_groups`: merge weights or `self.param_lists` and hyper parameters or `self.hypers` into a list of dictionaries

## How is `**default` prepared to contain all hyper params with values?
- hyper params are from two places: 
	- first,  `**defaults`: is a dictionary of hyperparams with values given as user inputs
	- second, `cbs` may contain their own `defaults` (a dict of hyper params with values)
- we will put all the `defaults` of `cbs` into a list 
- then we merge the list above with  `**defaults` into a bigger dictionary
- if `**defaults` match the `defaults` of `cbs`, the former will overwrite the latter, otherwise, they merge together into a longer dictionary (see examples below).

![[defaults.png]]
![[defaults8.png]]
![[defaults9.png]]
![[defaults10.png]]
![[defaults0.png]]
![[defaults1.png]]
![[defaults2.png]]


## How should `params` be prepared?
- put them into a `L` list rather than a normal list

## How should `self.param_lists` be prepared
- After `params` is turned into `L` list 
- `self.param_lists` is that `params` eventually turned into a list of list
- if the first item of `params` is a list, then all the following items become lists regardless even when they are not (see examples below)
- Code highlight: `L(L(2), L(3)) => [[2],[3]]`.
![[self.param_lists.png]]

## How should `self.hypers` be initialized?
- It is initialized as a L list of empty dictionaries
- the number of empty dictionaries is determined by the number of items inside `self.param_lists`
- Code highlight: `range_of` gives the list of indices of `self.param_lists` so that `self.hypers` matches `self.param_lists` in numbers.
![[self.hypers-init.png]]

## What does the final `self.hypers` look like?
![[self.hypers.png]]

## How does `self.hypers` get prepared?
- go through every set of weights of `self.param_lists` 
- each set of weights get a full set of hyper params with values
- if a hyper param has two or more values, each value will match a set of weights according to their position order
- see example below.
![[self.set_hypers.png]]

- Code highlight: How is the above done through `self.set_hyper`, `self._set_hyper`.
![[self.set_hyper.png]]
![[self._set_hyper.png]]

## How should the `cbs` callbacks/actions be prepared?
- put `cbs` into a `L` list rather than a normal list


## How should `self.state` the state of params (after applied with actions) be kept?
- put `state` into a `defaultdict` rather than a normal dict

## What does `self.param_groups` look like? 
- It is basically merging both `self.param_lists` and `self.hypers`.

![[self.param_groups-example.png]]

- Code highlight: when you run `self.param_groups`, you are calling.
![[self.param_groups.png]]




## How to debug/run ultra low source code
- use `s`, `loc`, `w`, select and paste to experiment and see
- when can't dive deeper to debug/run the ultra low source code, use `source` to get source printed and select and paste to run the ultra low source code instead

just see the image below

 
